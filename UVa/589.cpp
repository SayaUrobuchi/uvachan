#include<stdio.h>
#include<string.h>
int a,b;
char k[5000],l[5000][20][21],n[5000][4];
int abcc(int c,int i,int j)
{
	int o[5];
	if(i>1)
	{
		o[0]=0;
		o[4]=0;
		if(l[c][i-2][j]=='#')
		{
			o[0]=1;
			o[4]=1;
		}
	}
	else
	{
		o[0]=1;
		o[4]=1;
	}
	if(j>0)
	{
		o[1]=0;
		if(l[c][i-1][j-1]=='#')
		{
			o[1]=1;
		}
	}
	else
	{
		o[1]=1;
	}
	if(i<a)
	{
		o[2]=0;
		if(l[c][i][j]=='#')
		{
			o[2]=1;
		}
	}
	else
	{
		o[2]=1;
	}
	if(j<b-1)
	{
		o[3]=0;
		if(l[0][i-1][j+1]=='#')
		{
			o[3]=1;
		}
	}
	else
	{
		o[3]=1;
	}
	for(c=1;c<5;c++)
	{
		if(o[c])
		{
			if(o[c]==o[c-1])
			{
				break;
			}
		}
	}
	if(c==5)
	{
		return 1;
	}
	return 0;
}
int main()
{
	int c,d,e,f,g,h,i,j,m[5000];
	g=0;
	m[0]=-1;
	while(scanf("%d%d",&a,&b)==2)
	{
		if(!a&&!b)
		{
			break;
		}
		gets(l[0][0]);
		for(c=0,e=2;c<a;c++)
		{
			gets(l[0][c]);
			if(e)
			{
				for(d=0;d<b;d++)
				{
					if(l[0][c][d]=='S')
					{
						n[0][0]=c;
						n[0][1]=d;
						e--;
					}
					else if(l[0][c][d]=='B')
					{
						n[0][2]=c;
						n[0][3]=d;
						e--;
						if(!abcc(0,c,d))
						{
							e=0;
							f=0;
							break;
						}
						f=5;
					}
				}
			}
		}
		if(f<5)
		{
			printf("Maze #%d\nImpossible.\n\n",++g);
			continue;
		}
		for(c=0,d=1;c<d;c++)
		{
			if(c<30)
			printf("%d %d\n",n[c][0],n[c][1]);
			i=n[c][0];
			j=n[c][1];
			if(i>0)
			{
				if(l[c][i-1][j]!='#')
				{
					if(i-1==n[c][2]&&j==n[c][3])
					{
						if(i>1)
						{
							if(l[c][i-2][j]!='#')
							{
								if(l[c][i-2][j]=='T')
								{
									k[d]='N';
									m[d]=c;
									f=-1;
									break;
								}
								f=0;
								if(abcc(c,i-1,j))
								{
									for(e=0;e<a;e++)
									{
										strcpy(l[d][e],l[c][e]);
										for(f=0;f<b;f++)
										{
											if(l[d][e][f]=='@')
											{
												l[d][e][f]='.';
											}
										}
									}
									k[d]='N';
									m[d]=c;
									n[d][0]=i-1;
									n[d][1]=j;
									n[d][2]=n[c][2]-1;
									n[d++][3]=n[c][3];
								}
							}
						}
					}
					else if(l[c][i-1][j]!='@')
					{
						l[c][i-1][j]='@';
						for(e=0;e<a;e++)
						{
							strcpy(l[d][e],l[c][e]);
						}
						k[d]='n';
						m[d]=c;
						n[d][0]=i-1;
						n[d][1]=j;
						n[d][2]=n[c][2];
						n[d++][3]=n[c][3];
					}
				}
			}
			if(j>0)
			{
				if(l[c][i][j-1]!='#')
				{
					if(i==n[c][2]&&j-1==n[c][3])
					{
						if(j>1)
						{
							if(l[c][i][j-2]!='#')
							{
								if(l[c][i][j-2]=='T')
								{
									k[d]='W';
									m[d]=c;
									f=-1;
									break;
								}
								f=0;
								if(abcc(c,i,j-1))
								{
									for(e=0;e<a;e++)
									{
										strcpy(l[d][e],l[c][e]);
										for(f=0;f<b;f++)
										{
											if(l[d][e][f]=='@')
											{
												l[d][e][f]='.';
											}
										}
									}
									k[d]='W';
									m[d]=c;
									n[d][0]=i;
									n[d][1]=j-1;
									n[d][2]=n[c][2];
									n[d++][3]=n[c][3]-1;
								}
							}
						}
					}
					else if(l[c][i][j-1]!='@')
					{
						l[c][i][j-1]='@';
						for(e=0;e<a;e++)
						{
							strcpy(l[d][e],l[c][e]);
						}
						k[d]='w';
						m[d]=c;
						n[d][0]=i;
						n[d][1]=j-1;
						n[d][2]=n[c][2];
						n[d++][3]=n[c][3];
					}
				}
			}
			if(i<a-1)
			{
				if(l[c][i+1][j]!='#')
				{
					if(i+1==n[c][2]&&j==n[c][3])
					{
						if(i<a-2)
						{
							if(l[c][i+2][j]!='#')
							{
								if(l[c][i+2][j]=='T')
								{
									k[d]='S';
									m[d]=c;
									f=-1;
									break;
								}
								f=0;
								if(abcc(c,i+1,j))
								{
									for(e=0;e<a;e++)
									{
										strcpy(l[d][e],l[c][e]);
										for(f=0;f<b;f++)
										{
											if(l[d][e][f]=='@')
											{
												l[d][e][f]='.';
											}
										}
									}
									k[d]='S';
									m[d]=c;
									n[d][0]=i+1;
									n[d][1]=j;
									n[d][2]=n[c][2]+1;
									n[d++][3]=n[c][3];
								}
							}
						}
					}
					else if(l[c][i+1][j]!='@')
					{
						l[c][i+1][j]='@';
						for(e=0;e<a;e++)
						{
							strcpy(l[d][e],l[c][e]);
						}
						k[d]='s';
						m[d]=c;
						n[d][0]=i+1;
						n[d][1]=j;
						n[d][2]=n[c][2];
						n[d++][3]=n[c][3];
					}
				}
			}
			if(j<b-1)
			{
				if(l[c][i][j+1]!='#')
				{
					if(i==n[c][2]&&j+1==n[c][3])
					{
						if(j<b-2)
						{
							if(l[c][i][j+2]!='#')
							{
								if(l[c][i][j+2]=='T')
								{
									k[d]='E';
									m[d]=c;
									f=-1;
									break;
								}
								f=0;
								if(abcc(c,i,j+1))
								{
									for(e=0;e<a;e++)
									{
										strcpy(l[d][e],l[c][e]);
										for(f=0;f<b;f++)
										{
											if(l[d][e][f]=='@')
											{
												l[d][e][f]='.';
											}
										}
									}
									k[d]='E';
									m[d]=c;
									n[d][0]=i;
									n[d][1]=j+1;
									n[d][2]=n[c][2];
									n[d++][3]=n[c][3]+1;
								}
							}
						}
					}
					else if(l[c][i][j+1]!='@')
					{
						l[c][i][j+1]='@';
						for(e=0;e<a;e++)
						{
							strcpy(l[d][e],l[c][e]);
						}
						k[d]='e';
						m[d]=c;
						n[d][0]=i;
						n[d][1]=j+1;
						n[d][2]=n[c][2];
						n[d++][3]=n[c][3];
					}
				}
			}
		}
		if(f==-1)
		{
			for(c=0;;c++)
			{
				n[0][c]=k[d];
				d=m[d];
				if(d==-1)
				{
					break;
				}
			}
			printf("Maze #%d\n",++g);
			for(c--;c>-1;c--)
			{
				printf("%c",n[0][c]);
			}
			printf("\n\n");
		}
		else
		{
			printf("Maze #%d\nImpossible.\n\n",++g);
		}
	}
	return 0;
}